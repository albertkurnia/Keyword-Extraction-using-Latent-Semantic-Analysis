/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.waruwucoder.view;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.plaf.FileChooserUI;
import com.waruwucoder.controller.KeywordExtractorController;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import org.apache.commons.math3.stat.correlation.SpearmansCorrelation;
import org.jblas.DoubleMatrix;
import org.jblas.Singular;         

/**
 *
 * @author Waruwu
 */
public class KeywordExtractor extends javax.swing.JFrame {

    /**
     * Creates new form KeywordExtractor
     */
    
    final JFileChooser fc = new JFileChooser();
    File file;

    private static final String FILENAME = "E:\\File TA\\result.txt";
    private static final String FILENAME2 = "E:\\File TA\\sentences.txt";
    private static final String FILENAME3 = "E:\\File TA\\wordresult.txt";

    //I/O File
    BufferedReader br = null;
    BufferedReader br2 = null;
    FileReader fr = null;
    FileReader fr2 = null;
    String kata;
    int count = 0;
    int numOfDoc = 0;
    int numofkey = 0;
    String resultKeywordExtraction = "";

    // wordList is set of words from document
    ArrayList<String> wordList = new ArrayList<String>();

    //stopwordset is set of stopword bahasa indonesia
    Set<String> stopWordsSet = new HashSet<String>();

    //sentences is set of sentence from text file
    ArrayList<String> sentences = new ArrayList<String>();

    HashSet<String> keySpearman = new HashSet();

    //result dari textpreprocessing
    Set<String> resultTextPreprocessing = new HashSet<>();

    //wordResult is arraylist of the result of text preprocessing
    ArrayList<String> wordsResult = new ArrayList<String>();

    Vector<Double> resultTFIDF = new Vector();

    Map<String, String> pagerank = new HashMap<>();

    Map<String, String> res = new HashMap<>();

    Map<String, Double> resultPageRank = new HashMap<>();

    public KeywordExtractor() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        browseButton = new javax.swing.JButton();
        pathField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        insertTextField = new javax.swing.JTextArea();
        keywordExtractionButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        keywordResultField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        browseButton.setBackground(new java.awt.Color(204, 204, 204));
        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        pathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathFieldActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));

        logo.setIcon(new javax.swing.ImageIcon("F:\\Gateway\\image\\logo del100x100.png")); // NOI18N

        title.setBackground(new java.awt.Color(0, 0, 0));
        title.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        title.setForeground(new java.awt.Color(0, 0, 0));
        title.setText("LSA Keyword Extractor");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(logo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logo)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("* Select file ");

        jLabel2.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("* or insert text below");

        insertTextField.setColumns(20);
        insertTextField.setRows(5);
        jScrollPane1.setViewportView(insertTextField);

        keywordExtractionButton.setBackground(new java.awt.Color(204, 204, 204));
        keywordExtractionButton.setText("Keyword");
        keywordExtractionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordExtractionButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(204, 204, 204));
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        keywordResultField.setColumns(20);
        keywordResultField.setRows(5);
        jScrollPane2.setViewportView(keywordResultField);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(browseButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(keywordExtractionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(pathField)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(39, 39, 39))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(pathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(keywordExtractionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pathFieldActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser input = new JFileChooser();
        KeywordExtractorController kec = new KeywordExtractorController();
        int result = input.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            file = input.getSelectedFile();

            this.pathField.setText(file.getAbsolutePath().toString());

            kec.setFileName(file.getAbsolutePath().toString());
            try {
                java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader(file));
                String text = "";
                String line = reader.readLine();
                text += line;
                while (line != null) {
                    // (line);
                    line = reader.readLine();
                    text += line;
                    text += '\n';
                }
                this.insertTextField.setText(text.toString());
                reader.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(KeywordExtractor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(KeywordExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_browseButtonActionPerformed

    private void keywordExtractionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordExtractionButtonActionPerformed
        // TODO add your handling code here:
        runTextPreprocessing();
        calculateTFIDF();
        runSVD();
        //calculatetest();
    }//GEN-LAST:event_keywordExtractionButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_resetButtonActionPerformed

    private void runTextPreprocessing() {

        String fileName = KeywordExtractorController.getFileName();
        String fileStopword = KeywordExtractorController.getFileStopword();

        try {
            //open the file
            fr = new FileReader(fileName);
            fr2 = new FileReader(fileStopword);
            br = new BufferedReader(fr);
            br2 = new BufferedReader(fr2);

            String sCurrentLine;

            //br reads the text in file
            br = new BufferedReader(new FileReader(fileName));
            br2 = new BufferedReader(new FileReader(fileStopword));

            //read stopwords from file line per line
            while ((sCurrentLine = br2.readLine()) != null) {
                //adding current word to stopword set 
                this.stopWordsSet.add(sCurrentLine);
            }
            //read text from file line per line
            while ((sCurrentLine = br.readLine()) != null) {

                Pattern re = Pattern.compile("[^.!?\\s][^.!?]*(?:[.!?](?!['\"]?\\s|$)[^.!?]*)*[.!?]?['\"]?(?=\\s|$)", Pattern.MULTILINE | Pattern.COMMENTS);
                Matcher reMatcher = re.matcher(sCurrentLine);
                while (reMatcher.find()) {
                    String s = reMatcher.group().toString().toLowerCase();
                    sentences.add(s);
                    //System.out.println(s);
                }

                //Tokenizing the text
                StringTokenizer st = new StringTokenizer(sCurrentLine, ":,.-// (){}?!");

                while (st.hasMoreTokens()) {
                    //pass value of token to kata after the token has trimmed and lower cased
                    kata = st.nextToken().trim().replace("[^a-zA-Z]", "").toLowerCase();
                    if (isNumeric(kata)) {
                        continue;
                    } else {
                        if (!stopWordsSet.contains(kata)) {
                            //adding kata to wordResult
                            wordsResult.add(kata);
                            // (kata);
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) {
                    br.close();
                }

                if (fr != null) {
                    fr.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            // remove duplicate word in arraylist
            wordsResult = new ArrayList<String>(new LinkedHashSet<String>(wordsResult));

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILENAME2))) {
                for (String sentence : sentences) {
                    String content = sentence + " " + '\n';
                    bw.write(content);
                    //System.out.println(sentence);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILENAME3))) {
                for (String word : wordsResult) {
                    String content = word + " " + '\n';
                    bw.write(content);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            //this.keywordResultField.setText(resultTextPreprocessing2);
        }
    }

    public boolean isNumeric(String s) {
        return s.matches("[-+]?\\d*\\.?\\d+");
    }

    private void calculateTFIDF() {
        KeywordExtractorController kec = new KeywordExtractorController();
        int i = 0;
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILENAME))) {
            for (String word : wordsResult) {
                for (String sentence : sentences) {
                    i++;
                    // System.out.println(word + " " + kec.tfIdf(sentence,sentences, word));
                    String content = "Doc " + i + " " + "=>" + " " + word + " " + kec.tfIdf(sentence, sentences, word);
                    //resultTFIDF.(kec.tfIdf(sentence, sentences, word));
                    double a = kec.tfIdf(sentence, sentences, word);
                    double roundOff = Math.round(a * 100.0) / 100.0;
                    resultTFIDF.add(roundOff);
                    bw.write(content);
                }
                numOfDoc = i;
                i = 0;
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }

    private void runSVD() {
        int z = 0;
        double[][] docTermMatrix = new double[wordsResult.size()][numOfDoc];
        System.out.println("Term Document Matrix");
        System.out.println("---------------------");
        for (int i = 0; i < wordsResult.size(); i++) {
            //System.out.println(wordsResult.get(i) + " ");
            for (int j = 0; j < numOfDoc; j++) {
                docTermMatrix[i][j] = resultTFIDF.get(z);
                System.out.print(docTermMatrix[i][j] + " ");
                z++;
            }

            System.out.print('\n');
        }

        System.out.println(docTermMatrix.length);
        System.out.println(docTermMatrix[0].length);
        // SVD
        DoubleMatrix[] doubleMatrix = Singular.fullSVD(new DoubleMatrix(docTermMatrix));
        DoubleMatrix U = doubleMatrix[0];
        DoubleMatrix sigma = doubleMatrix[1];
        DoubleMatrix V = doubleMatrix[2];

        System.out.println("U rows = " + U.rows + " U columns : " + U.columns);
        System.out.println("Matrix U");
        for (int i = 0; i < U.rows; i++) {
            for (int j = 0; j < U.columns; j++) {
                System.out.print(U.get(i, j) + " ");
            }
            System.out.println("");
        }

        System.out.println("Matrix Sigma");
        for (int i = 0; i < sigma.length; i++) {
            System.out.print(sigma.get(i) + " ");
        }
        System.out.println("");

        System.out.println("Matrix V");
        for (int i = 0; i < V.rows; i++) {
            for (int j = 0; j < V.columns; j++) {
                System.out.print(V.get(i, j) + " ");
            }
            System.out.println("");
        }

        // reducing sigma to a size k
//        List<Double> nonZero = new ArrayList<>();
//        for (int i = 0; i < sigma.length; i++) {
//            if (sigma.get(i) > 0.0) {
//                System.out.print(sigma.get(i) + " ");
//                nonZero.add(i, sigma.get(i));   
//            } else {
//                break;
//            }
//        }
        // determine mean value of sigma
        double hasil = 0;
        for (int i = 0; i < sigma.length; i++) {
            //System.out.print(sigma.get(i) + " ");
            hasil += sigma.get(i);
        }

        double mean = hasil / sigma.length;

        List<Double> temp = new ArrayList<>();
        for (int i = 0; i < sigma.length; i++) {
            if (sigma.get(i) > mean) {
                temp.add(i, sigma.get(i));
            }
        }

        int k = temp.size();

        DoubleMatrix reducedSigma = new DoubleMatrix(temp.size());

        for (int i = 0; i < k; i++) {
            reducedSigma.put(i, 0, temp.get(i));
        }

        System.out.println(reducedSigma.columns + " " + reducedSigma.rows);
        System.out.println("Matrix Reduced Sigma");
        for (int i = 0; i < reducedSigma.length; i++) {
            System.out.print(reducedSigma.get(i) + " ");
        }
        System.out.println("");

        DoubleMatrix reducedU = U.getRange(0, U.rows, 0, k);
        DoubleMatrix reducedV = V.getRange(0, k, 0, V.columns);

//        int k = nonZero.size();
//        DoubleMatrix reducedSigma = new DoubleMatrix(nonZero.size());
//        for (int i = 0; i < k; i++) {
//            reducedSigma.put(i, 0, nonZero.get(i));
//        }
//        DoubleMatrix reducedU = U.getRange(0,U.rows,0,k);
//        DoubleMatrix reducedV = V.getRange(0,k,0,V.columns);
//        
        System.out.println(U.columns);
        System.out.println("\nreduced U");
        for (int i = 0; i < U.rows; i++) {
            for (int j = 0; j < k; j++) {
                System.out.print(reducedU.get(i, j) + " ");
            }
            System.out.println("");
        }
//        
        System.out.println("reduced V");
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < V.columns; j++) {
                System.out.print(reducedV.get(i, j) + " ");
            }
            System.out.println("");
        }

//        DoubleMatrix tempMatrix;
//        DoubleMatrix resultMatrix;
//        tempMatrix = reducedU.mmul(reducedSigma);
//        resultMatrix = reducedV.mmul(tempMatrix);
//        
//        System.out.println("result Matrix");
//        for(int i=0;i<resultMatrix.rows;i++){
//            for(int j=0;j < resultMatrix.columns;j++){
//                System.out.print(resultMatrix.get(i,j) + " ");
//            }
//            System.out.println("");
//        }
        DoubleMatrix sigmaNewMatrix = new DoubleMatrix(k, k);
        //insert reducedSigma to kxk matrix
        int it = 0;
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                if (i == j) {
                    sigmaNewMatrix.put(i, j, reducedSigma.get(i));
                    it++;
                } else {
                    sigmaNewMatrix.put(i, j, 0.0);
                }
            }
        }
//        
        System.out.println("Sigma New Matrix");
        for (int i = 0; i < sigmaNewMatrix.rows; i++) {
            for (int j = 0; j < sigmaNewMatrix.columns; j++) {
                System.out.print(sigmaNewMatrix.get(i, j) + " ");
            }
            System.out.println("");
        }

        System.out.println("Sigma New Matrix row: " + sigmaNewMatrix.rows);
        System.out.println("Sigma New Matrix columns: " + sigmaNewMatrix.columns);
        System.out.println("ReducedU Matrix columns: " + reducedU.rows);
        System.out.println("ReducedU Matrix columns: " + reducedU.columns);
        System.out.println("ReducedV Matrix columns: " + reducedV.rows);
        System.out.println("ReducedV Matrix columns: " + reducedV.columns);
        DoubleMatrix tempMatrix = new DoubleMatrix();
        tempMatrix = reducedU.mmul(sigmaNewMatrix).mmul(reducedV);

//        
        System.out.println("result Matrix");
        for (int i = 0; i < tempMatrix.rows; i++) {
            for (int j = 0; j < tempMatrix.columns; j++) {
                System.out.print(tempMatrix.get(i, j) + " ");
            }
            System.out.println("");
        }

        SpearmansCorrelation s = new SpearmansCorrelation();

        Map<String, Double> kv = new HashMap<>();

        double[] tempMatrixA = new double[tempMatrix.columns];
        double[] tempMatrixB = new double[tempMatrix.columns];

        int v = 0;
        for (int i = 0; i < tempMatrix.rows; i++) {
            for (int l = i + 1; l < wordsResult.size(); l++) {
                for (int j = 0; j < tempMatrix.columns; j++) {
                    tempMatrixA[v] = tempMatrix.get(i, j);
                    tempMatrixB[v] = tempMatrix.get(l, j);
                    v++;
                }
                v = 0;
                if (s.correlation(tempMatrixA, tempMatrixB) >= 0.75) {
                    kv.put(wordsResult.get(i).toString() + "." + wordsResult.get(l).toString(), s.correlation(tempMatrixA, tempMatrixB));
                    System.out.print(wordsResult.get(i).toString() + "." + wordsResult.get(l).toString() + " " + s.correlation(tempMatrixA, tempMatrixB) + '\n');
                    keySpearman.add(wordsResult.get(i).toString());
                    numofkey++;
                }
            }
            System.out.println("");
        }

        String resultPage = "";
        //ArrayList<String> res = new ArrayList<>();

        for (Iterator<String> ita = keySpearman.iterator(); ita.hasNext();) {
            String ts = ita.next();
            //System.out.println(ts);
            for (Map.Entry<String, Double> entry : kv.entrySet()) {

                String str = entry.getKey().toString();
                String[] parts = str.split("\\.");

                String part1 = parts[0];
                String part2 = parts[1];

                if (ts.equals(part1)) {
                    resultPage += part2;
                    resultPage += ',';
                }
            }
            //res.add(resultPage);
            res.put(ts, resultPage);
            resultPage = "";
        }

        for (Map.Entry<String, String> loop : res.entrySet()) {
            //System.out.println("Key : " + loop.getKey() + " " + "Value : " + loop.getValue());

            double valueofpagerank = 0;
            String val = loop.getValue().toString();
            String[] values = val.split("\\,");

            for (int i = 0; i < values.length; i++) {
                valueofpagerank += countPageRank(values[i], countValueOfPage(values[i]));
                //System.out.print(countValueOfPage(values[i])+ " ");
                //System.out.print(values[i]);
            }
            //System.out.println("");
            resultPageRank.put(loop.getKey(), valueofpagerank);
            //System.out.println("Key : " + loop.getKey() + " " + "Value : " + valueofpagerank);
        }

        // countValueOfPage("tindakan");
        resultPageRank = sortByValue(resultPageRank);
        int jumlah = 0;
        for (Map.Entry<String, Double> loop : resultPageRank.entrySet()) {
            if (jumlah < 10) {
                System.out.println("Key : " + loop.getKey() + " " + "Value : " + loop.getValue());
                resultKeywordExtraction += "Key : " + loop.getKey() + " " + "Value : " + loop.getValue();
                resultKeywordExtraction += '\n';
                jumlah++;
            } else {
                break;
            }
        }
        this.keywordResultField.setText(resultKeywordExtraction);
    }

    public int countValueOfPage(String page) {
        int counter = 0;
        String val = res.get(page);
        if (val == null) {
            return counter;
        } //System.out.println(val);
        else {
            String[] values = val.split(",");
            counter = values.length;

            return counter;
        }
    }

    public double countPageRank(String page, int countValue) {
        double valuePageRank = 0;
        double initialValue = 0.25;

        if (countValue != 0) {
            valuePageRank = initialValue / (double) countValue;
        } else {
            valuePageRank = 0;
        }
        return valuePageRank;
    }

    public static <K, V extends Comparable<? super V>> Map<K, V>
            sortByValue(Map<K, V> map) {
        List<Map.Entry<K, V>> list
                = new LinkedList<>(map.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<K, V>>() {
            @Override
            public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {
                return (o2.getValue()).compareTo(o1.getValue());
            }
        });

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list) {
            result.put(entry.getKey(), entry.getValue());
        }
        return result;
    }

    private void calculatetest() {
        KeywordExtractorController kec = new KeywordExtractorController();
        for (String sentence : sentences) {
            System.out.println("TF : " + kec.tf(sentence, "algoritma"));
            System.out.println("IDF : " + kec.idf(sentences, "algoritma"));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KeywordExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KeywordExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KeywordExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KeywordExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KeywordExtractor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextArea insertTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton keywordExtractionButton;
    private javax.swing.JTextArea keywordResultField;
    private javax.swing.JLabel logo;
    private javax.swing.JTextField pathField;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
